-- Specifically test AQO machinery for queries uses partial paths and executed
-- with parallel workers.
CREATE EXTENSION IF NOT EXISTS aqo;
SELECT true AS success FROM aqo_reset();
 success 
---------
 t
(1 row)

-- Utility tool. Allow to filter system-dependent strings from explain output.
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('%s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
SET aqo.mode = 'learn';
SET aqo.show_details = true;
-- Be generous with a number parallel workers to test the machinery
SET max_parallel_workers = 64;
SET max_parallel_workers_per_gather = 64;
-- Enforce usage of parallel workers
SET parallel_setup_cost = 0.1;
SET parallel_tuple_cost = 0.0001;
CREATE TABLE t AS (
  SELECT x AS id, repeat('a', 512) AS payload FROM generate_series(1, 1E5) AS x
);
ANALYZE t;
-- Simple test. Check serialization machinery mostly.
SELECT count(*) FROM t WHERE id % 100 = 0; -- Learning stage
 count 
-------
  1000
(1 row)

SELECT str FROM expln('
  EXPLAIN (ANALYZE, COSTS OFF, TIMING OFF, SUMMARY OFF)
    SELECT count(*) FROM t WHERE id % 100 = 0;') AS str
WHERE str NOT LIKE '%Worker%';
                                str                                 
--------------------------------------------------------------------
 Finalize Aggregate (actual rows=1 loops=1)
   AQO not used
   ->  Gather (actual rows=3 loops=1)
         AQO not used
         ->  Partial Aggregate (actual rows=1 loops=3)
               AQO not used
               ->  Parallel Seq Scan on t (actual rows=333 loops=3)
                     AQO: rows=1000, error=0%
                     Filter: ((id % '100'::numeric) = '0'::numeric)
                     Rows Removed by Filter: 33000
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(13 rows)

-- More complex query just to provoke errors
SELECT count(*) FROM
  (SELECT id FROM t WHERE id % 100 = 0 GROUP BY (id)) AS q1,
  (SELECT max(id) AS id, payload FROM t
    WHERE id % 101 = 0 GROUP BY (payload)) AS q2
WHERE q1.id = q2.id; -- Learning stage
 count 
-------
     0
(1 row)

-- XXX: Why grouping prediction isn't working here?
SELECT str FROM expln('
EXPLAIN (ANALYZE, COSTS OFF, TIMING OFF, SUMMARY OFF)
SELECT count(*) FROM
  (SELECT id FROM t WHERE id % 100 = 0 GROUP BY (id)) AS q1,
  (SELECT max(id) AS id, payload FROM t
    WHERE id % 101 = 0 GROUP BY (payload)) AS q2
WHERE q1.id = q2.id;') AS str
WHERE str NOT LIKE '%Workers%' AND str NOT LIKE '%Sort Method%'
  AND str NOT LIKE '%Gather Merge%';
                                               str                                                
--------------------------------------------------------------------------------------------------
 Aggregate (actual rows=1 loops=1)
   AQO not used
   ->  Merge Join (actual rows=0 loops=1)
         AQO not used
         Merge Cond: (q2.id = t_1.id)
         ->  Sort (actual rows=1 loops=1)
               Sort Key: q2.id
               ->  Subquery Scan on q2 (actual rows=1 loops=1)
                     AQO not used
                     ->  Finalize GroupAggregate (actual rows=1 loops=1)
                           AQO not used
                           Group Key: t.payload
                                 AQO not used
                                 ->  Partial GroupAggregate (actual rows=1 loops=3)
                                       AQO not used
                                       Group Key: t.payload
                                       ->  Sort (actual rows=330 loops=3)
                                             AQO not used
                                             Sort Key: t.payload
                                             ->  Parallel Seq Scan on t (actual rows=330 loops=3)
                                                   AQO: rows=991, error=0%
                                                   Filter: ((id % '101'::numeric) = '0'::numeric)
                                                   Rows Removed by Filter: 33003
         ->  Group (actual rows=1000 loops=1)
               AQO not used
               Group Key: t_1.id
                     AQO not used
                     ->  Group (actual rows=333 loops=3)
                           AQO not used
                           Group Key: t_1.id
                           ->  Sort (actual rows=333 loops=3)
                                 AQO not used
                                 Sort Key: t_1.id
                                 ->  Parallel Seq Scan on t t_1 (actual rows=333 loops=3)
                                       AQO: rows=991, error=-1%
                                       Filter: ((id % '100'::numeric) = '0'::numeric)
                                       Rows Removed by Filter: 33000
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(40 rows)

RESET parallel_tuple_cost;
RESET parallel_setup_cost;
RESET max_parallel_workers;
RESET max_parallel_workers_per_gather;
DROP TABLE t;
DROP FUNCTION expln;
DROP EXTENSION aqo;
