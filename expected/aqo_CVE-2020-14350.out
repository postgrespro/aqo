/*
 * Check fix for CVE-2020-14350.
 * See also 7eeb1d986 postgresql commit.
 */
SET client_min_messages = 'warning';
DROP ROLE IF EXISTS regress_hacker;
SET client_min_messages = 'notice';
CREATE ROLE regress_hacker LOGIN;
-- Test 1
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
GRANT CREATE ON SCHEMA public TO regress_hacker;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION format(f text, r regclass, t text)
RETURNS text
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
  RETURN '';
END
$$ LANGUAGE plpgsql RETURNS NULL ON NULL INPUT;
RESET ROLE;
CREATE EXTENSION aqo;
SET aqo.join_threshold = 0;
-- Test result (must be 'off')
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

RESET ROLE;
DROP FUNCTION format(text, regclass, text);
DROP EXTENSION IF EXISTS aqo;
-- Test 2
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_reset()
RETURNS bigint
AS $$
BEGIN
  RETURN 1;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_reset" already exists with same argument types
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_reset()
RETURNS bigint
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
  RETURN 2;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_reset();
 aqo_reset 
-----------
         2
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_reset();
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 3
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_enable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_enable_class" already exists with same argument types
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_enable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_enable_class(42);
 aqo_enable_class 
------------------
 
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_enable_class(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 4
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_disable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_disable_class" already exists with same argument types
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_disable_class(hash bigint)
RETURNS VOID
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_disable_class(42);
 aqo_disable_class 
-------------------
 
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_disable_class(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 5
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_drop_class(queryid bigint)
RETURNS integer
AS $$
BEGIN
  RETURN 1;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_drop_class" already exists with same argument types
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_drop_class(queryid bigint)
RETURNS integer
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
  RETURN 2;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_drop_class(42);
 aqo_drop_class 
----------------
              2
(1 row)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_drop_class(bigint);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 6
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_execution_time(controlled boolean)
RETURNS TABLE(num integer, id bigint, fshash bigint, exec_time double precision, nexecs bigint)
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_execution_time" already exists with same argument types
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_execution_time(controlled boolean)
RETURNS TABLE(num integer, id bigint, fshash bigint, exec_time double precision, nexecs bigint)
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_execution_time(true);
 aqo_execution_time 
--------------------
(0 rows)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_execution_time(boolean);
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Test 7
RESET ROLE;
ALTER ROLE regress_hacker NOSUPERUSER;
SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

CREATE FUNCTION aqo_memory_usage(OUT name text, OUT allocated_size int, OUT used_size int)
RETURNS SETOF record
AS $$
BEGIN
END
$$ LANGUAGE plpgsql;
RESET ROLE;
-- Test result (error expected)
CREATE EXTENSION aqo;
ERROR:  function "aqo_memory_usage" already exists with same argument types
SET ROLE regress_hacker;
CREATE OR REPLACE FUNCTION aqo_memory_usage(OUT name text, OUT allocated_size int, OUT used_size int)
RETURNS SETOF record
AS $$
BEGIN
  ALTER ROLE regress_hacker SUPERUSER;
END
$$ LANGUAGE plpgsql;
RESET ROLE;
SELECT aqo_memory_usage();
 aqo_memory_usage 
------------------
(0 rows)

SET ROLE regress_hacker;
SHOW is_superuser;
 is_superuser 
--------------
 on
(1 row)

RESET ROLE;
DROP FUNCTION aqo_memory_usage();
DROP EXTENSION IF EXISTS aqo;
NOTICE:  extension "aqo" does not exist, skipping
-- Cleanup
RESET ROLE;
DROP OWNED BY regress_hacker CASCADE;
DROP ROLE regress_hacker;
