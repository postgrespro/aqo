-- Tests on cardinality estimation of FDW-queries:
-- simple ForeignScan.
-- JOIN push-down (check push of baserestrictinfo and joininfo)
-- Aggregate push-down
-- Push-down of groupings with HAVING clause.
CREATE EXTENSION aqo;
CREATE EXTENSION postgres_fdw;
SET aqo.mode = 'learn';
SET aqo.show_details = 'true'; -- show AQO info for each node and entire query.
SET aqo.show_hash = 'false'; -- a hash value is system-depended. Ignore it.
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$'
            )$$;
    END;
$d$;
CREATE USER MAPPING FOR PUBLIC SERVER loopback;
CREATE TABLE local (x int);
CREATE FOREIGN TABLE frgn(x int) SERVER loopback OPTIONS (table_name 'local');
INSERT INTO frgn (x) VALUES (1);
ANALYZE local;
-- Trivial foreign scan.s
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT x FROM frgn;
                         QUERY PLAN                          
-------------------------------------------------------------
 Foreign Scan on frgn (actual rows=1 loops=1) (AQO not used)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(4 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT x FROM frgn;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan on frgn (actual rows=1 loops=1) (AQO: cardinality=1, error=0%)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(4 rows)

-- Push down base filters. Use verbose mode to see filters.
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, VERBOSE))
SELECT x FROM frgn WHERE x < 10;
ERROR:  syntax error at or near ")"
LINE 1: ...LAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, VERBOSE))
                                                                      ^
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, VERBOSE)
SELECT x FROM frgn WHERE x < 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan on public.frgn (actual rows=1 loops=1) (AQO not used)
   Output: x
   Remote SQL: SELECT x FROM public.local WHERE ((x < 10))
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(6 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT x FROM frgn WHERE x < -10; -- AQO ignores constants
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on frgn (actual rows=0 loops=1) (AQO: cardinality=1, error=100%)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(4 rows)

-- Trivial JOIN push-down.
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM frgn AS a, frgn AS b WHERE a.x=b.x;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Merge Join (actual rows=1 loops=1) (AQO not used)
   Merge Cond: (a.x = b.x)
   ->  Sort (actual rows=1 loops=1) (AQO not used)
         Sort Key: a.x
         Sort Method: quicksort  Memory: 25kB
         ->  Foreign Scan on frgn a (actual rows=1 loops=1) (AQO not used)
   ->  Sort (actual rows=1 loops=1) (AQO not used)
         Sort Key: b.x
         Sort Method: quicksort  Memory: 25kB
         ->  Foreign Scan on frgn b (actual rows=1 loops=1) (AQO not used)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(13 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, VERBOSE)
SELECT * FROM frgn AS a, frgn AS b WHERE a.x=b.x;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan (actual rows=1 loops=1) (AQO: cardinality=1, error=0%)
   Output: a.x, b.x
   Relations: (public.frgn a) INNER JOIN (public.frgn b)
   Remote SQL: SELECT r1.x, r2.x FROM (public.local r1 INNER JOIN public.local r2 ON (((r1.x = r2.x))))
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(7 rows)

-- TODO: Non-mergejoinable join condition.
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM frgn AS a, frgn AS b WHERE a.x<b.x;
                     QUERY PLAN                      
-----------------------------------------------------
 Foreign Scan (actual rows=0 loops=1) (AQO not used)
   Relations: (frgn a) INNER JOIN (frgn b)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(5 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, VERBOSE)
SELECT * FROM frgn AS a, frgn AS b WHERE a.x<b.x;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan (actual rows=0 loops=1) (AQO not used)
   Output: a.x, b.x
   Relations: (public.frgn a) INNER JOIN (public.frgn b)
   Remote SQL: SELECT r1.x, r2.x FROM (public.local r1 INNER JOIN public.local r2 ON (((r1.x < r2.x))))
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(7 rows)

DROP EXTENSION aqo;
