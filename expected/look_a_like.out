-- Preliminaries
CREATE EXTENSION IF NOT EXISTS aqo;
SELECT true AS success FROM aqo_reset();
 success 
---------
 t
(1 row)

SET aqo.wide_search = 'on';
SET aqo.mode = 'learn';
SET aqo.show_details = 'on';
set aqo.show_hash = 'off';
SET aqo.min_neighbors_for_predicting = 1;
SET enable_nestloop = 'off';
SET enable_mergejoin = 'off';
SET enable_material = 'off';
DROP TABLE IF EXISTS a,b CASCADE;
NOTICE:  table "a" does not exist, skipping
NOTICE:  table "b" does not exist, skipping
-- Create tables with correlated datas in columns
CREATE TABLE a (x1 int, x2 int, x3 int);
INSERT INTO a (x1, x2, x3) SELECT mod(ival,10), mod(ival,10), mod(ival,10) FROM generate_series(1,1000) As ival;
CREATE TABLE b (y1 int, y2 int, y3 int);
INSERT INTO b (y1, y2, y3) SELECT mod(ival + 1,10), mod(ival + 1,10), mod(ival + 1,10) FROM generate_series(1,1000) As ival;
--
-- Returns string-by-string explain of a query. Made for removing some strings
-- from the explain output.
--
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('EXPLAIN (ANALYZE, VERBOSE, COSTS OFF, TIMING OFF, SUMMARY OFF, BUFFERS OFF) %s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
-- no one predicted rows. we use knowledge cardinalities of the query
-- in the next queries with the same fss_hash
SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 = 5 AND x2 = 5 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                          result                           
-----------------------------------------------------------
 Nested Loop (actual rows=10000.00 loops=1)
   Disabled: true
   Output: a.x1, b.y1
   AQO not used
   ->  Seq Scan on public.a (actual rows=100.00 loops=1)
         Output: a.x1, a.x2, a.x3
         Filter: ((a.x1 = 5) AND (a.x2 = 5))
         Rows Removed by Filter: 900
         AQO not used
   ->  Seq Scan on public.b (actual rows=100.00 loops=100)
         Output: b.y1, b.y2, b.y3
         Filter: (b.y1 = 5)
         Rows Removed by Filter: 900
         AQO not used
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A LEFT JOIN b ON A.x1 = B.y1 WHERE x1 = 5 AND x2 = 5;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                          result                           
-----------------------------------------------------------
 Nested Loop Left Join (actual rows=10000.00 loops=1)
   Disabled: true
   Output: a.x1, b.y1
   AQO not used
   ->  Seq Scan on public.a (actual rows=100.00 loops=1)
         Output: a.x1, a.x2, a.x3
         Filter: ((a.x1 = 5) AND (a.x2 = 5))
         Rows Removed by Filter: 900
         AQO: rows=100, error=0%
   ->  Seq Scan on public.b (actual rows=100.00 loops=100)
         Output: b.y1, b.y2, b.y3
         Filter: (b.y1 = 5)
         Rows Removed by Filter: 900
         AQO: rows=100, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 < 5 AND x2 < 5 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                            result                             
---------------------------------------------------------------
 Hash Join (actual rows=50000.00 loops=1)
   Output: a.x1, b.y1
   Hash Cond: (b.y1 = a.x1)
   AQO not used
   ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
         Output: b.y1, b.y2, b.y3
         AQO not used
   ->  Hash (actual rows=500.00 loops=1)
         Output: a.x1
         ->  Seq Scan on public.a (actual rows=500.00 loops=1)
               Output: a.x1
               Filter: ((a.x1 < 5) AND (a.x2 < 5))
               Rows Removed by Filter: 500
               AQO not used
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

--query contains nodes that have already been predicted
SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 < 10 AND x2 < 5 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                            result                             
---------------------------------------------------------------
 Hash Join (actual rows=50000.00 loops=1)
   Output: a.x1, b.y1
   Hash Cond: (b.y1 = a.x1)
   AQO: rows=50000, error=0%
   ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
         Output: b.y1, b.y2, b.y3
         AQO: rows=1000, error=0%
   ->  Hash (actual rows=500.00 loops=1)
         Output: a.x1
         ->  Seq Scan on public.a (actual rows=500.00 loops=1)
               Output: a.x1
               Filter: ((a.x1 < 10) AND (a.x2 < 5))
               Rows Removed by Filter: 500
               AQO: rows=500, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 > 2 AND x2 > 2 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                            result                             
---------------------------------------------------------------
 Hash Join (actual rows=70000.00 loops=1)
   Output: a.x1, b.y1
   Hash Cond: (b.y1 = a.x1)
   AQO not used
   ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
         Output: b.y1, b.y2, b.y3
         AQO: rows=1000, error=0%
   ->  Hash (actual rows=700.00 loops=1)
         Output: a.x1
         ->  Seq Scan on public.a (actual rows=700.00 loops=1)
               Output: a.x1
               Filter: ((a.x1 > 2) AND (a.x2 > 2))
               Rows Removed by Filter: 300
               AQO not used
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 > 5 AND x2 > 5 AND x3 < 10 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                               
-------------------------------------------------------------------
 Hash Join (actual rows=40000.00 loops=1)
   Output: a.x1, b.y1
   Hash Cond: (b.y1 = a.x1)
   AQO not used
   ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
         Output: b.y1, b.y2, b.y3
         AQO: rows=1000, error=0%
   ->  Hash (actual rows=400.00 loops=1)
         Output: a.x1
         ->  Seq Scan on public.a (actual rows=400.00 loops=1)
               Output: a.x1
               Filter: ((a.x1 > 5) AND (a.x2 > 5) AND (a.x3 < 10))
               Rows Removed by Filter: 600
               AQO not used
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 < 5 AND x2 < 5 AND x3 < 10 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                               
-------------------------------------------------------------------
 Hash Join (actual rows=50000.00 loops=1)
   Output: a.x1, b.y1
   Hash Cond: (b.y1 = a.x1)
   AQO not used
   ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
         Output: b.y1, b.y2, b.y3
         AQO: rows=1000, error=0%
   ->  Hash (actual rows=500.00 loops=1)
         Output: a.x1
         ->  Seq Scan on public.a (actual rows=500.00 loops=1)
               Output: a.x1
               Filter: ((a.x1 < 5) AND (a.x2 < 5) AND (a.x3 < 10))
               Rows Removed by Filter: 500
               AQO not used
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

--query contains nodes that have already been predicted
SELECT str AS result
FROM expln('
SELECT x1,y1 FROM A,B WHERE x1 < 5 AND x2 < 4 AND x3 < 5 AND A.x1 = B.y1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 Hash Join (actual rows=40000.00 loops=1)
   Output: a.x1, b.y1
   Hash Cond: (b.y1 = a.x1)
   AQO: rows=50000, error=20%
   ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
         Output: b.y1, b.y2, b.y3
         AQO: rows=1000, error=0%
   ->  Hash (actual rows=400.00 loops=1)
         Output: a.x1
         ->  Seq Scan on public.a (actual rows=400.00 loops=1)
               Output: a.x1
               Filter: ((a.x1 < 5) AND (a.x2 < 4) AND (a.x3 < 5))
               Rows Removed by Filter: 600
               AQO: rows=500, error=20%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(17 rows)

SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 < 4 AND x3 > 1 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=2.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO not used
   ->  Nested Loop (actual rows=200000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO not used
         ->  Seq Scan on public.a (actual rows=200.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 < 4) AND (a.x3 > 1))
               Rows Removed by Filter: 800
               AQO not used
         ->  Seq Scan on public.b (actual rows=1000.00 loops=200)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

--query contains nodes that have already been predicted
SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 < 4 AND x3 > 1 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=2.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO: rows=2, error=0%
   ->  Nested Loop (actual rows=200000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO: rows=200000, error=0%
         ->  Seq Scan on public.a (actual rows=200.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 < 4) AND (a.x3 > 1))
               Rows Removed by Filter: 800
               AQO: rows=200, error=0%
         ->  Seq Scan on public.b (actual rows=1000.00 loops=200)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 < 4 AND x3 > 2 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=1.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO: rows=2, error=50%
   ->  Nested Loop (actual rows=100000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO: rows=200000, error=50%
         ->  Seq Scan on public.a (actual rows=100.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 < 4) AND (a.x3 > 2))
               Rows Removed by Filter: 900
               AQO: rows=200, error=50%
         ->  Seq Scan on public.b (actual rows=1000.00 loops=100)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 < 3 AND x2 < 5 AND x3 > 1 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=1.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO not used
   ->  Nested Loop (actual rows=100000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO not used
         ->  Seq Scan on public.a (actual rows=100.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 < 3) AND (a.x2 < 5) AND (a.x3 > 1))
               Rows Removed by Filter: 900
               AQO not used
         ->  Seq Scan on public.b (actual rows=1000.00 loops=100)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 > 1 AND x2 < 4 AND x3 > 1 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=2.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO not used
   ->  Nested Loop (actual rows=200000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO not used
         ->  Seq Scan on public.a (actual rows=200.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 > 1) AND (a.x2 < 4) AND (a.x3 > 1))
               Rows Removed by Filter: 800
               AQO not used
         ->  Seq Scan on public.b (actual rows=1000.00 loops=200)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 > 1 AND x2 < 4 AND x3 < 5 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=2.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO not used
   ->  Nested Loop (actual rows=200000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO not used
         ->  Seq Scan on public.a (actual rows=200.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 > 1) AND (a.x2 < 4) AND (a.x3 < 5))
               Rows Removed by Filter: 800
               AQO not used
         ->  Seq Scan on public.b (actual rows=1000.00 loops=200)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 < 4 AND x2 < 5 AND x3 > 1 and y1 > 2 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=2.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO not used
   ->  Nested Loop (actual rows=140000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO not used
         ->  Seq Scan on public.a (actual rows=200.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 < 4) AND (a.x2 < 5) AND (a.x3 > 1))
               Rows Removed by Filter: 800
               AQO: rows=100, error=-100%
         ->  Seq Scan on public.b (actual rows=700.00 loops=200)
               Output: b.y1, b.y2, b.y3
               Filter: (b.y1 > 2)
               Rows Removed by Filter: 300
               AQO not used
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(21 rows)

--query contains nodes that have already been predicted
SELECT str AS result
FROM expln('
SELECT x1 FROM A,B WHERE x1 < 3 AND x2 < 4 AND x3 > 1 and y1 > 2 GROUP BY(x1);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                              result                              
------------------------------------------------------------------
 HashAggregate (actual rows=1.00 loops=1)
   Output: a.x1
   Group Key: a.x1
   AQO: rows=2, error=50%
   ->  Nested Loop (actual rows=70000.00 loops=1)
         Disabled: true
         Output: a.x1
         AQO: rows=140000, error=50%
         ->  Seq Scan on public.a (actual rows=100.00 loops=1)
               Output: a.x1, a.x2, a.x3
               Filter: ((a.x1 < 3) AND (a.x2 < 4) AND (a.x3 > 1))
               Rows Removed by Filter: 900
               AQO: rows=200, error=50%
         ->  Seq Scan on public.b (actual rows=700.00 loops=100)
               Output: b.y1, b.y2, b.y3
               Filter: (b.y1 > 2)
               Rows Removed by Filter: 300
               AQO: rows=700, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(21 rows)

CREATE TABLE c (z1 int, z2 int, z3 int);
INSERT INTO c (z1, z2, z3) SELECT mod(ival + 1,10), mod(ival + 1,10), mod(ival + 1,10) FROM generate_series(1,1000) As ival;
SELECT str AS result
FROM expln('
SELECT * FROM (a LEFT JOIN b ON a.x1 = b.y1) sc WHERE
not exists (SELECT z1 FROM c WHERE sc.x1=c.z1 );') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                                result                                
----------------------------------------------------------------------
 Hash Left Join (actual rows=0.00 loops=1)
   Output: a.x1, a.x2, a.x3, b.y1, b.y2, b.y3
   Hash Cond: (a.x1 = b.y1)
   AQO not used
   ->  Hash Anti Join (actual rows=0.00 loops=1)
         Output: a.x1, a.x2, a.x3
         Hash Cond: (a.x1 = c.z1)
         AQO not used
         ->  Seq Scan on public.a (actual rows=1000.00 loops=1)
               Output: a.x1, a.x2, a.x3
               AQO not used
         ->  Hash (actual rows=1000.00 loops=1)
               Output: c.z1
               ->  Seq Scan on public.c (actual rows=1000.00 loops=1)
                     Output: c.z1
                     AQO not used
   ->  Hash (never executed)
         Output: b.y1, b.y2, b.y3
         ->  Seq Scan on public.b (never executed)
               Output: b.y1, b.y2, b.y3
               AQO: rows=1000
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(24 rows)

SELECT str AS result
FROM expln('
SELECT * FROM (A LEFT JOIN B ON A.x1 = B.y1) sc left join C on sc.x1=C.z1;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%' and str NOT LIKE '%Sort Method%';
                                result                                
----------------------------------------------------------------------
 Hash Left Join (actual rows=10000000.00 loops=1)
   Output: a.x1, a.x2, a.x3, b.y1, b.y2, b.y3, c.z1, c.z2, c.z3
   Hash Cond: (a.x1 = c.z1)
   AQO not used
   ->  Hash Left Join (actual rows=100000.00 loops=1)
         Output: a.x1, a.x2, a.x3, b.y1, b.y2, b.y3
         Hash Cond: (a.x1 = b.y1)
         AQO not used
         ->  Seq Scan on public.a (actual rows=1000.00 loops=1)
               Output: a.x1, a.x2, a.x3
               AQO: rows=1000, error=0%
         ->  Hash (actual rows=1000.00 loops=1)
               Output: b.y1, b.y2, b.y3
               ->  Seq Scan on public.b (actual rows=1000.00 loops=1)
                     Output: b.y1, b.y2, b.y3
                     AQO: rows=1000, error=0%
   ->  Hash (actual rows=1000.00 loops=1)
         Output: c.z1, c.z2, c.z3
         ->  Seq Scan on public.c (actual rows=1000.00 loops=1)
               Output: c.z1, c.z2, c.z3
               AQO: rows=1000, error=0%
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(24 rows)

RESET aqo.wide_search;
DROP EXTENSION aqo CASCADE;
DROP TABLE a;
DROP TABLE b;
DROP TABLE c;
DROP FUNCTION expln;
