CREATE EXTENSION aqo;
SET aqo.join_threshold = 0;
SET aqo.mode = 'learn';
SET aqo.show_details = 'on';
SET enable_material = 'off';
DROP TABLE IF EXISTS a,b CASCADE;
NOTICE:  table "a" does not exist, skipping
NOTICE:  table "b" does not exist, skipping
CREATE TABLE a (x int);
INSERT INTO a (x) SELECT mod(ival,10) FROM generate_series(1,1000) As ival;
CREATE TABLE b (y int);
INSERT INTO b (y) SELECT mod(ival + 1,10) FROM generate_series(1,1000) As ival;
--
-- Returns string-by-string explain of a query. Made for removing some strings
-- from the explain output.
--
CREATE OR REPLACE FUNCTION expln(query_string text) RETURNS SETOF text AS $$
BEGIN
    RETURN QUERY
        EXECUTE format('EXPLAIN (ANALYZE, VERBOSE, COSTS OFF, TIMING OFF, SUMMARY OFF) %s', query_string);
    RETURN;
END;
$$ LANGUAGE PLPGSQL;
-- no one predicted rows. we use knowledge cardinalities of the query
-- in the next queries with the same fss_hash
SELECT str AS result
FROM expln('
SELECT x FROM A where x = 5;') AS str
WHERE str NOT LIKE 'Query Identifier%';
                     result                     
------------------------------------------------
 Seq Scan on public.a (actual rows=100 loops=1)
   AQO not used
   Output: x
   Filter: (a.x = 5)
   Rows Removed by Filter: 900
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(8 rows)

SELECT str AS result
FROM expln('
SELECT x FROM A,B WHERE x = 5 AND A.x = B.y;') AS str
WHERE str NOT LIKE 'Query Identifier%'
; -- Find cardinality for SCAN A(x=5) from a neighbour class, created by the
                         result                         
--------------------------------------------------------
 Nested Loop (actual rows=10000 loops=1)
   AQO not used
   Output: a.x
   ->  Seq Scan on public.b (actual rows=100 loops=1)
         AQO not used
         Output: b.y
         Filter: (b.y = 5)
         Rows Removed by Filter: 900
   ->  Seq Scan on public.a (actual rows=100 loops=100)
         AQO: rows=100, error=0%
         Output: a.x
         Filter: (a.x = 5)
         Rows Removed by Filter: 900
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(16 rows)

-- query, executed above.
SELECT str AS result
FROM expln('
SELECT x, sum(x) FROM A,B WHERE y = 5 AND A.x = B.y group by(x);') AS str
WHERE str NOT LIKE 'Query Identifier%'
; -- Find the JOIN cardinality from a neighbour class.
                            result                            
--------------------------------------------------------------
 GroupAggregate (actual rows=1 loops=1)
   AQO not used
   Output: a.x, sum(a.x)
   Group Key: a.x
   ->  Nested Loop (actual rows=10000 loops=1)
         AQO: rows=10000, error=0%
         Output: a.x
         ->  Seq Scan on public.a (actual rows=100 loops=1)
               AQO: rows=100, error=0%
               Output: a.x
               Filter: (a.x = 5)
               Rows Removed by Filter: 900
         ->  Seq Scan on public.b (actual rows=100 loops=100)
               AQO: rows=100, error=0%
               Output: b.y
               Filter: (b.y = 5)
               Rows Removed by Filter: 900
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(20 rows)

-- cardinality 100 in the first Seq Scan on a
SELECT str AS result
FROM expln('
SELECT x, sum(x) FROM A WHERE x = 5 group by(x);') AS str
WHERE str NOT LIKE 'Query Identifier%';
                        result                        
------------------------------------------------------
 GroupAggregate (actual rows=1 loops=1)
   AQO not used
   Output: x, sum(x)
   Group Key: a.x
   ->  Seq Scan on public.a (actual rows=100 loops=1)
         AQO: rows=100, error=0%
         Output: x
         Filter: (a.x = 5)
         Rows Removed by Filter: 900
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(12 rows)

-- no one predicted rows. we use knowledge cardinalities of the query
-- in the next queries with the same fss_hash
SELECT str AS result
FROM expln('
SELECT x FROM A where x < 10 group by(x);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%';
                        result                         
-------------------------------------------------------
 HashAggregate (actual rows=10 loops=1)
   AQO not used
   Output: x
   Group Key: a.x
   ->  Seq Scan on public.a (actual rows=1000 loops=1)
         AQO not used
         Output: x
         Filter: (a.x < 10)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(11 rows)

-- cardinality 1000 in Seq Scan on a
SELECT str AS result
FROM expln('
SELECT x,y FROM A,B WHERE x < 10 AND A.x = B.y;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%';
                           result                            
-------------------------------------------------------------
 Merge Join (actual rows=100000 loops=1)
   AQO not used
   Output: a.x, b.y
   Merge Cond: (a.x = b.y)
   ->  Sort (actual rows=1000 loops=1)
         AQO not used
         Output: a.x
         Sort Key: a.x
         ->  Seq Scan on public.a (actual rows=1000 loops=1)
               AQO: rows=1000, error=0%
               Output: a.x
               Filter: (a.x < 10)
   ->  Sort (actual rows=99901 loops=1)
         AQO not used
         Output: b.y
         Sort Key: b.y
         ->  Seq Scan on public.b (actual rows=1000 loops=1)
               AQO not used
               Output: b.y
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(22 rows)

-- cardinality 100 in Seq Scan on a and Seq Scan on b
SELECT str AS result
FROM expln('
SELECT x FROM A,B where x < 10 and y > 10 group by(x);') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%';
                          result                          
----------------------------------------------------------
 HashAggregate (actual rows=0 loops=1)
   AQO not used
   Output: a.x
   Group Key: a.x
   ->  Nested Loop (actual rows=0 loops=1)
         AQO not used
         Output: a.x
         ->  Seq Scan on public.b (actual rows=0 loops=1)
               AQO not used
               Output: b.y
               Filter: (b.y > 10)
               Rows Removed by Filter: 1000
         ->  Seq Scan on public.a (never executed)
               AQO: rows=1000
               Output: a.x
               Filter: (a.x < 10)
 Using aqo: true
 AQO mode: LEARN
 JOINS: 1
(19 rows)

--
-- TODO:
-- Not executed case. What could we do better here?
--
SELECT str AS result
FROM expln('
SELECT x,y FROM A,B WHERE x < 10 and y > 10 AND A.x = B.y;') AS str
WHERE str NOT LIKE 'Query Identifier%' and str NOT LIKE '%Memory%'
;
                          result                          
----------------------------------------------------------
 Hash Join (actual rows=0 loops=1)
   AQO not used
   Output: a.x, b.y
   Hash Cond: (a.x = b.y)
   ->  Seq Scan on public.a (actual rows=1 loops=1)
         AQO: rows=1000, error=100%
         Output: a.x
         Filter: (a.x < 10)
   ->  Hash (actual rows=0 loops=1)
         AQO not used
         Output: b.y
         ->  Seq Scan on public.b (actual rows=0 loops=1)
               AQO: rows=1, error=100%
               Output: b.y
               Filter: (b.y > 10)
               Rows Removed by Filter: 1000
 Using aqo: true
 AQO mode: LEARN
 JOINS: 0
(19 rows)

RESET enable_material;
DROP TABLE a,b CASCADE;
SELECT true FROM aqo_reset();
 ?column? 
----------
 t
(1 row)

DROP EXTENSION aqo CASCADE;
