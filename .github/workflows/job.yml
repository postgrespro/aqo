name: 'Join Order Benchmark'

env:
  # Use it just for a report
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

# Trigger the workflow on each release or on a manual action
on:
  workflow_dispatch:
  release:

jobs:
  AQO_JOB_Benchmark:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
    - name: "Define PostreSQL major version and set basic environment"
      run: |
        echo "The action workflow is triggered by the $BRANCH_NAME"

        # Cleanup, because of self-hosted runner
        rm -rf $GITHUB_WORKSPACE/../pg

        patch_name=$(ls aqo_*.patch|tail -1)
        echo "CORE_PATCH_NAME=$patch_name" >> $GITHUB_ENV

        # we can get number, otherwise set up master
        vers_number=$(echo "$patch_name"|tr -d -c 0-9)
        echo "PG_MAJOR_VERSION=$vers_number" >> $GITHUB_ENV

        branch_name="REL_${vers_number}_STABLE"
        echo "PG_BRANCH=$branch_name" >> $GITHUB_ENV
    - name: "Set master branch name, if needed"
      if: env.PG_MAJOR_VERSION == ''
      run: |
        branch_name="master"
        echo "PG_BRANCH=$branch_name" >> $GITHUB_ENV

    # Create workspace directory and environment variable.
    # It is the second step because on the first we define versions and branches
    - name: "Initial dir"
      run: |
        git clone -b $PG_BRANCH --depth=1 --single-branch https://github.com/postgres/postgres.git $GITHUB_WORKSPACE/../pg

        # Invent variable with full path to PG directory just because github
        # actions don't like relative paths ...
        cd $GITHUB_WORKSPACE/../pg
        echo PG_DIR=`pwd` >> $GITHUB_ENV

    - name: "Prepare PG directory"
      run: |
        cd $PG_DIR
        cp -r ../aqo contrib/aqo
        patch -p1 --no-backup-if-mismatch < contrib/aqo/$CORE_PATCH_NAME
        echo "COPT=-Werror" >> $GITHUB_ENV
        echo "CONFIGURE_OPTS=--prefix=`pwd`/tmp_install --enable-tap-tests --enable-cassert" >> $GITHUB_ENV

        # Instance-related environment
        echo "$PG_DIR/tmp_install/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$PG_DIR/tmp_install/lib" >> $GITHUB_ENV
        echo `pwd`/contrib/aqo/.github/scripts/job >> $GITHUB_PATH

        # JOB-specific environment
        echo "JOB_DIR=$HOME/jo-bench" >> $GITHUB_ENV
        echo "PGDATABASE=`whoami`" >> $GITHUB_ENV
        echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGDATA=PGDATA" >> $GITHUB_ENV
        echo "PGUSER=`whoami`" >> $GITHUB_ENV
        echo "PGPORT=5432" >> $GITHUB_ENV

    # Just for debug
    - name: "Environment (debug output)"
      if: ${{ always() }}
      run: |
        echo "PG_MAJOR_VERSION: $PG_MAJOR_VERSION"
        echo "PG_DIR: $PG_DIR"
        echo "PG_BRANCH: $PG_BRANCH"
        echo "CORE_PATCH_NAME: $CORE_PATCH_NAME"
        # See these paths to understand correctness of the instance initialization
        echo "PATHs: $PATH"
        echo "PG Libs: $LD_LIBRARY_PATH"

        # JOB-specific environment variable
        echo "JOB path: $JOB_DIR"
        echo "PG Environment: dbname: $PGDATABASE, host: $PGHOST, pgdata: $PGDATA, pguser: $PGUSER, pgport: $PGPORT"

    - name: "Compilation"
      run: |
        cd $PG_DIR
        ./configure $CONFIGURE_OPTS CFLAGS="-O0"
        make clean > /dev/null
        make -C contrib clean > /dev/null
        make -j2 > /dev/null && make -j2 -C contrib > /dev/null
        make install >> make.log
        make -C contrib install >> make.log
        make -C doc install > /dev/null

    - name: "Launch AQO instance"
      run: |
        cd $PG_DIR

        # Launch an instance with AQO extension
        aqo_instance_launch.sh
        AQO_VERSION=$(psql -t -c "SELECT extversion FROM pg_extension WHERE extname='aqo'")
        echo "AQO_VERSION=$AQO_VERSION" >> $GITHUB_ENV

    - name: "Load a dump of the test database"
      run: |
        cd $PG_DIR
        echo "AQO_VERSION: $AQO_VERSION"
        load_imdb.sh

    # Quick pass in parallel mode with statistics
    - name: "Test No.1: Gather statistics in disabled mode"
      run: |
        cd $PG_DIR
        set_test_conditions_1.sh
        job_pass.sh
        dump_knowledge.sh

    - name: "Archive JOB test results"
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.AQO_VERSION }}-${{ env.CORE_BRANCH_NAME }}-${{ env.BRANCH_NAME }}-result_base_stat
        path: |
          # Relative paths not allowed ...
          ${{ env.PG_DIR }}/explains.txt
          ${{ env.PG_DIR }}/report.txt
          ${{ env.PG_DIR }}/knowledge_base.dump
          ${{ env.PG_DIR }}/logfile.log
        retention-days: 1

    # Test No.2: Learn on all incoming queries
    - name: "Test No.2: Learning stage"
      run: |
        cd $PG_DIR
        set_test_conditions_2.sh
        job_pass.sh 10
        check_result.sh

    # One pass on frozen AQO data, dump knowledge base, check total error
    - name: "Test No.3: Frozen execution"
      run: |
        cd $PG_DIR
        set_test_conditions_3.sh
        job_pass.sh
        dump_knowledge.sh

    - name: "Archive JOB test results - frozen"
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.AQO_VERSION }}-${{ env.CORE_BRANCH_NAME }}-${{ env.BRANCH_NAME }}-result_frozen
        path: |
          # Relative paths not allowed ...
          ${{ env.PG_DIR }}/explains.txt
          ${{ env.PG_DIR }}/report.txt
          ${{ env.PG_DIR }}/knowledge_base.dump
          ${{ env.PG_DIR }}/logfile.log
        retention-days: 7

    - name: "Cleanup"
      run: |
        cd $PG_DIR
        pg_ctl -D PGDATA stop

