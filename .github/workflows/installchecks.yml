name: "InstallChecks"

on:
  push:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    # Set major PostgreSQL version for all underlying steps
    - name: "Extract Postgres major version number"
      run: |
        PG_MAJOR_VERSION=$(echo "$BRANCH_NAME" | grep --only-matching 'stable[0-9].' | grep --only-matching '[0-9].')

        # Declare PG_MAJOR_VERSION as a environment variable
        echo "PG_MAJOR_VERSION=$PG_MAJOR_VERSION" >> $GITHUB_ENV
        echo "CORE_BRANCH_NAME=REL_${PG_MAJOR_VERSION}_STABLE" >> $GITHUB_ENV
        echo "AQO_PATCH_NAME=aqo_pg$PG_MAJOR_VERSION.patch" >> $GITHUB_ENV
    - name: "Set proper names for the master case"
      if: env.PG_MAJOR_VERSION == ''
      run: |
        echo "PG_MAJOR_VERSION=master" >> $GITHUB_ENV
        echo "CORE_BRANCH_NAME=master" >> $GITHUB_ENV
        echo "AQO_PATCH_NAME=aqo_master.patch" >> $GITHUB_ENV

    - name: "Preparations"
      run: |
        sudo apt install libipc-run-perl libxml2-utils libxml2-dev xsltproc libxslt1-dev

        echo "Deploying to production server on branch" $BRANCH_NAME
        git config --global user.email "ci@postgrespro.ru"
        git config --global user.name "CI PgPro admin"
        git clone https://github.com/postgres/postgres.git pg
        cd pg
        git checkout $CORE_BRANCH_NAME
        git clone https://github.com/postgrespro/aqo.git contrib/aqo
        git -C contrib/aqo checkout $BRANCH_NAME
        patch -p1 --no-backup-if-mismatch < contrib/aqo/$AQO_PATCH_NAME
        COPT="-Werror"
        CONFIGURE_OPTS="--prefix=`pwd`/tmp_install --enable-tap-tests --enable-cassert"
        echo "CONFIGURE_OPTS=$CONFIGURE_OPTS" >> $GITHUB_ENV
        echo "COPT=$COPT" >> $GITHUB_ENV

    - name: "Paths"
      run: |
        echo "$GITHUB_WORKSPACE/pg/contrib/aqo/.github/scripts/job" >> $GITHUB_PATH
        ls -la pg/contrib/aqo/.github/scripts/job
        echo "$GITHUB_WORKSPACE/pg/tmp_install/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/pg/tmp_install/lib" >> $GITHUB_ENV
        echo "PGDATABASE=`whoami`" >> $GITHUB_ENV
        echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGDATA=PGDATA" >> $GITHUB_ENV
        echo "PGUSER=`whoami`" >> $GITHUB_ENV
        echo "PGPORT=5432" >> $GITHUB_ENV

    - name: "Debug"
      run: |
        echo "paths: $PATH"
        echo "PG_MAJOR_VERSION: $PG_MAJOR_VERSION, CORE_BRANCH_NAME: $CORE_BRANCH_NAME, AQO_PATCH_NAME: $AQO_PATCH_NAME, CONFIGURE_OPTS: $CONFIGURE_OPTS"

    - name: "Compilation"
      run: |
        cd pg
        ./configure $CONFIGURE_OPTS CFLAGS="-O2"
        make -j4 > /dev/null && make -j4 -C contrib > /dev/null
        make install >> make.log && make -C contrib install > /dev/null

    - name: "Launch AQO instance"
      run: |
        cd pg

        # Launch an instance with AQO extension
        aqo_instance_launch.sh
        AQO_VERSION=$(psql -t -c "SELECT extversion FROM pg_extension WHERE extname='aqo'")
        echo "AQO_VERSION=$AQO_VERSION" >> $GITHUB_ENV
        echo "Use AQO v.$AQO_VERSION"

    # Pass installcheck in disabled mode
    - name: installcheck_disabled
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'off'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_disabled_forced_stat
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_frozen
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'frozen'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_controlled
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'controlled'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_learn
      continue-on-error: true
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'learn'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        learn_result=$(make -k installcheck-world)

    - name: installcheck_intelligent
      continue-on-error: true
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'intelligent'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make -k installcheck-world

    - name: installcheck_forced
      continue-on-error: true
      run: |
        cd pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'forced'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make -k installcheck-world

    # Save Artifacts
    - name: Archive artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.AQO_VERSION }}-${{ env.CORE_BRANCH_NAME }}-${{ env.BRANCH_NAME }}-artifacts
        path: |
          pg/src/test/regress/regression.diffs
          pg/logfile.log
          pg/contrib/aqo/tmp_check/log
        retention-days: 2

