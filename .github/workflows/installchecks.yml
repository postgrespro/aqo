name: "InstallChecks"

on:
  push:

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    # Set major PostgreSQL version for all underlying steps
    - uses: actions/checkout@v3
    - name: "Define PostreSQL major version"
      run: |
        patch_name=$(ls aqo_*.patch|tail -1)
        echo "CORE_PATCH_NAME=$patch_name" >> $GITHUB_ENV

        # we can get number, otherwise set up master
        vers_number=$(echo "$patch_name"|tr -d -c 0-9)
        echo "PG_MAJOR_VERSION=$vers_number" >> $GITHUB_ENV

        branch_name="REL_${vers_number}_STABLE"
        echo "PG_BRANCH=$branch_name" >> $GITHUB_ENV

    - name: "Set master branch name, if needed"
      if: env.PG_MAJOR_VERSION == ''
      run: |
        branch_name="master"
        echo "PG_BRANCH=$branch_name" >> $GITHUB_ENV

    - name: "Environment (debug output)"
      if: ${{ always() }}
      run: |
        echo "Use PostgreSQL branch $PG_BRANCH (patch: $CORE_PATCH_NAME)"
         echo "Deploying to production server on branch" $BRANCH_NAME "(PG $PG_BRANCH)"
        git config --global user.email "ci@postgrespro.ru"
        git config --global user.name "CI PgPro admin"

    - name: "Prepare PG directory"
      run: |
        sudo apt install libipc-run-perl libxml2-utils libxml2-dev xsltproc libxslt1-dev
        git clone -b $PG_BRANCH --depth=1 --single-branch https://github.com/postgres/postgres.git $GITHUB_WORKSPACE/../pg
        cd $GITHUB_WORKSPACE/../pg
        cp -r ../aqo contrib/aqo
        patch -p1 --no-backup-if-mismatch < contrib/aqo/$CORE_PATCH_NAME

    - name: "Paths"
      run: |
        cd $GITHUB_WORKSPACE/../pg
        echo "COPT=-Werror" >> $GITHUB_ENV
        echo "CONFIGURE_OPTS=--prefix=`pwd`/tmp_install --enable-tap-tests --enable-cassert" >> $GITHUB_ENV
        echo "$GITHUB_WORKSPACE/../pg/tmp_install/bin" >> $GITHUB_PATH
        echo "$GITHUB_WORKSPACE/../pg/contrib/aqo/.github/scripts/job" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/pg/tmp_install/lib" >> $GITHUB_ENV
        echo "PGDATABASE=`whoami`" >> $GITHUB_ENV
        echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGDATA=PGDATA" >> $GITHUB_ENV
        echo "PGUSER=`whoami`" >> $GITHUB_ENV
        echo "PGPORT=5432" >> $GITHUB_ENV

    - name: "Compilation"
      run: |
        cd $GITHUB_WORKSPACE/../pg
        echo "paths: $PATH"
        echo "COPT: $COPT"
        echo "CONFIGURE_OPTS: $CONFIGURE_OPTS"
        ./configure $CONFIGURE_OPTS CFLAGS="-O2" > /dev/null
        make -j4 > /dev/null && make -j4 -C contrib > /dev/null
        make install >> make.log && make -C contrib install > /dev/null

    - name: "Launch AQO instance"
      run: |
        cd $GITHUB_WORKSPACE/../pg

        # Launch an instance with AQO extension
        aqo_instance_launch.sh
        AQO_VERSION=$(psql -t -c "SELECT extversion FROM pg_extension WHERE extname='aqo'")
        echo "AQO_VERSION=$AQO_VERSION" >> $GITHUB_ENV
        echo "Use AQO v.$AQO_VERSION"

    # Pass installcheck in disabled mode
    - name: installcheck_disabled
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'off'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_disabled_forced_stat
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_frozen
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'frozen'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_controlled
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'controlled'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make installcheck-world

    - name: installcheck_learn
      continue-on-error: true
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'learn'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        learn_result=$(make -k installcheck-world)

    - name: installcheck_intelligent
      continue-on-error: true
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'intelligent'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make -k installcheck-world

    - name: installcheck_forced
      continue-on-error: true
      run: |
        cd $GITHUB_WORKSPACE/../pg
        psql -c "ALTER SYSTEM SET aqo.mode = 'forced'"
        psql -c "ALTER SYSTEM SET aqo.force_collect_stat = 'on'"
        psql -c "SELECT pg_reload_conf()"
        make -k installcheck-world

    # Save Artifacts
    - name: Archive artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.AQO_VERSION }}-${{ env.PG_BRANCH }}-${{ env.CORE_PATCH_NAME }}-artifacts
        path: |
          pg/src/test/regress/regression.diffs
          pg/logfile.log
          pg/contrib/aqo/tmp_check/log
        retention-days: 2

